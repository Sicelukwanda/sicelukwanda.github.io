{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Luke\\\\dennisushi-remake\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ProjectCard from './ProjectCard';\nimport projectsData from './projects.json';\nimport ExperienceTimeline from './ExperienceTimeline';\nimport experiencesData from './timeline.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fs = require('fs');\n//joining path of directory \nconst directoryPath = 'src/projects';\n//passsing directoryPath and callback function\nfs.readdir(directoryPath, function (err, files) {\n  //handling error\n  if (err) {\n    return console.log('Unable to scan directory: ' + err);\n  }\n  //listing all files using forEach\n  files.forEach(function (file) {\n    // Do whatever you want to do with the file\n    console.log(file);\n  });\n});\nfunction App() {\n  _s();\n  const [projects, setProjects] = useState([]);\n  useEffect(() => {\n    // This assumes your projects.json is stored in the public folder\n    // If it's in src, you can directly import it as done above\n    setProjects(projectsData);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        class: \"fixed-name\",\n        children: \"Denis Hadjivelichkov\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"About me\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `${process.env.PUBLIC_URL}/images/profile-photo.jpg`,\n        alt: \"Profile\",\n        className: \"profile-photo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"I am a PhD student at the \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://www.ucl.ac.uk/ai-centre/\",\n          children: \"CDT for Foundational AI\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }, this), \" at \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://www.ucl.ac.uk/\",\n          children: \"UCL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 89\n        }, this), \", where I work on bridging the gap between robotics and intelligence through machine learning. I am part of the \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://rpl-as-ucl.github.io/\",\n          children: \"Robot Perception and Learning Lab\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 15\n        }, this), \" where my PhD advisor is \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://dkanou.github.io/\",\n          children: \"Dr. Dimitrios Kanoulas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 117\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Projects & Publications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Projects-container\",\n      children: projects.map(project => /*#__PURE__*/_jsxDEV(ProjectCard, {\n        project: project\n      }, project.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Roles & Experience\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ExperienceTimeline, {\n      experiences: experiencesData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"TSrpuQX6QU8EgjQSxaAzj2u9i4o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ProjectCard","projectsData","ExperienceTimeline","experiencesData","jsxDEV","_jsxDEV","fs","require","directoryPath","readdir","err","files","console","log","forEach","file","App","_s","projects","setProjects","className","children","class","fileName","_jsxFileName","lineNumber","columnNumber","src","process","env","PUBLIC_URL","alt","href","map","project","id","experiences","_c","$RefreshReg$"],"sources":["C:/Users/Luke/dennisushi-remake/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ProjectCard from './ProjectCard';\nimport projectsData from './projects.json';\nimport ExperienceTimeline from './ExperienceTimeline';\nimport experiencesData from './timeline.json';\n\nconst fs = require('fs');\n//joining path of directory \nconst directoryPath = 'src/projects';\n//passsing directoryPath and callback function\nfs.readdir(directoryPath, function (err, files) {\n    //handling error\n    if (err) {\n        return console.log('Unable to scan directory: ' + err);\n    } \n    //listing all files using forEach\n    files.forEach(function (file) {\n        // Do whatever you want to do with the file\n        console.log(file); \n    });\n});\n\nfunction App() {\n  const [projects, setProjects] = useState([]);\n\n  useEffect(() => {\n    // This assumes your projects.json is stored in the public folder\n    // If it's in src, you can directly import it as done above\n    setProjects(projectsData);\n  }, []);     \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2 class=\"fixed-name\">Denis Hadjivelichkov</h2>\n        <h1>About me</h1>\n        <img src={`${process.env.PUBLIC_URL}/images/profile-photo.jpg`} alt=\"Profile\" className=\"profile-photo\"/>\n        <p>\n          I am a PhD student at \n          the <a href=\"https://www.ucl.ac.uk/ai-centre/\">CDT for Foundational AI</a> at <a href=\"https://www.ucl.ac.uk/\">UCL</a>, \n          where I work on bridging the gap between robotics \n          and intelligence through machine learning. \n          I am part of \n          the <a href=\"https://rpl-as-ucl.github.io/\">Robot Perception and Learning Lab</a> where my PhD advisor is <a href=\"https://dkanou.github.io/\">Dr. Dimitrios Kanoulas</a>.\n        </p>\n      </header>\n      <h1>Projects & Publications</h1>\n      <div className=\"Projects-container\">\n        {projects.map((project) => (\n          <ProjectCard key={project.id} project={project} />\n        ))}\n      </div>\n      <h1>Roles & Experience</h1>\n      <ExperienceTimeline experiences={experiencesData}/>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}