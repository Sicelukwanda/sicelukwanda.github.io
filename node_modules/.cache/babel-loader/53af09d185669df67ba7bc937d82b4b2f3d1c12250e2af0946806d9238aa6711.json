{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Luke\\\\dennisushi-remake\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ProjectCard from './ProjectCard';\nimport projectsData from './projects.json';\nimport ExperienceTimeline from './ExperienceTimeline';\nimport experiencesData from './timeline.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [projects, setProjects] = useState([]);\n  useEffect(() => {\n    // This assumes your projects.json is stored in the public folder\n    // If it's in src, you can directly import it as done above\n    setProjects(projectsData);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        class: \"fixed-name\",\n        children: \"Denis Hadjivelichkov\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"About me\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `${process.env.PUBLIC_URL}/images/profile-photo.jpg`,\n        alt: \"Profile\",\n        className: \"profile-photo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"I am a PhD student at the \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://www.ucl.ac.uk/ai-centre/\",\n          children: \"CDT for Foundational AI\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 15\n        }, this), \" at \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://www.ucl.ac.uk/\",\n          children: \"UCL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 89\n        }, this), \", where I work on bridging the gap between robotics and intelligence through machine learning. My recent interests include semantic correspondences, world models, neural radiance fields, and imitation learning with diffusion. I am part of the \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://rpl-as-ucl.github.io/\",\n          children: \"Robot Perception and Learning Lab\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 15\n        }, this), \" where my PhD advisor is \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://dkanou.github.io/\",\n          children: \"Dr. Dimitrios Kanoulas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 117\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://www.linkedin.com/in/denishadjivelichkov/\",\n        target: \"_blank\",\n        children: \"LinkedIn\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"mailto:dennis.hvel@gmail.com\",\n        target: \"_blank\",\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Projects & Publications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Projects-container\",\n      children: projects.map(project => /*#__PURE__*/_jsxDEV(ProjectCard, {\n        project: project\n      }, project.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Roles & Experience\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ExperienceTimeline, {\n      experiences: experiencesData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"TSrpuQX6QU8EgjQSxaAzj2u9i4o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ProjectCard","projectsData","ExperienceTimeline","experiencesData","jsxDEV","_jsxDEV","App","_s","projects","setProjects","className","children","class","fileName","_jsxFileName","lineNumber","columnNumber","src","process","env","PUBLIC_URL","alt","href","target","map","project","id","experiences","_c","$RefreshReg$"],"sources":["C:/Users/Luke/dennisushi-remake/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ProjectCard from './ProjectCard';\nimport projectsData from './projects.json';\nimport ExperienceTimeline from './ExperienceTimeline';\nimport experiencesData from './timeline.json';\n\nfunction App() {\n  const [projects, setProjects] = useState([]);\n\n  useEffect(() => {\n    // This assumes your projects.json is stored in the public folder\n    // If it's in src, you can directly import it as done above\n    setProjects(projectsData);\n  }, []);     \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2 class=\"fixed-name\">Denis Hadjivelichkov</h2>\n        <h1>About me</h1>\n        <img src={`${process.env.PUBLIC_URL}/images/profile-photo.jpg`} alt=\"Profile\" className=\"profile-photo\"/>\n        <p>\n          I am a PhD student at \n          the <a href=\"https://www.ucl.ac.uk/ai-centre/\">CDT for Foundational AI</a> at <a href=\"https://www.ucl.ac.uk/\">UCL</a>, \n          where I work on bridging the gap between robotics \n          and intelligence through machine learning. \n          My recent interests include\n          semantic correspondences, \n          world models, neural radiance fields, and imitation learning with diffusion.\n          I am part of \n          the <a href=\"https://rpl-as-ucl.github.io/\">Robot Perception and Learning Lab</a> where my PhD advisor is <a href=\"https://dkanou.github.io/\">Dr. Dimitrios Kanoulas</a>.\n        </p>\n        <a href=\"https://www.linkedin.com/in/denishadjivelichkov/\" target=\"_blank\">\n          LinkedIn\n        </a>\n        <a href=\"mailto:dennis.hvel@gmail.com\" target=\"_blank\">\n          Email\n        </a>\n      </header>\n      <h1>Projects & Publications</h1>\n      <div className=\"Projects-container\">\n        {projects.map((project) => (\n          <ProjectCard key={project.id} project={project} />\n        ))}\n      </div>\n      <h1>Roles & Experience</h1>\n      <ExperienceTimeline experiences={experiencesData}/>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}